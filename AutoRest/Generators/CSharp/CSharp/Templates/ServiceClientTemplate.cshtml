@using System
@using Microsoft.Rest.Generator.CSharp
@using Microsoft.Rest.Generator.CSharp.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.ServiceClientTemplateModel>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
@foreach (var usingString in Model.Usings) {
@:    using @usingString;
}
@EmptyLine
    /// <summary>
    @WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    /// </summary>
    public partial class @Model.Name : ServiceClient<@Model.Name>, I@(Model.Name)
    {
        @(Include(new ServiceClientBodyTemplate(), Model))

        @EmptyLine

        /// <summary>
        /// Initializes a new instance of the @Model.Name class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='tokenProvider'>
        /// Required. The token provider used to generate authentication token for all web api requests.
        /// </param>
        public @(Model.Name)(Uri baseUri, Vulcan.Security.ITokenProvider tokenProvider)
            : this(baseUri, new DelegatingHandler[] {
                new Vulcan.WebApi.Client.AuthenticatedMessageHandler(tokenProvider),
                new Vulcan.WebApi.Client.ErrorMessageHandler()
            })
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.Initialize();
            this.BaseUri = baseUri;
        }
    
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.SetRetryPolicy(new Microsoft.Rest.TransientFaultHandling.RetryPolicy(new Microsoft.Rest.TransientFaultHandling.TransientErrorIgnoreStrategy(), 0));

        @foreach (var operation in Model.Operations) 
        {
            @:this.@(operation.MethodGroupName) = new @(operation.MethodGroupType)(this);
        }
            this.BaseUri = new Uri("@Model.BaseUrl");
        @foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
        {
            @:this.@(property.Name) = @(property.DefaultValue);
        }

            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            @foreach (var polymorphicType in Model.ModelTypes.Where(t => t.PolymorphicDiscriminator != null))
            {
            @:SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<@(polymorphicType.Name)>("@(polymorphicType.PolymorphicDiscriminator)"));
            @:DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<@(polymorphicType.Name)>("@(polymorphicType.PolymorphicDiscriminator)"));
            } 
        }    
    
        @foreach (var method in Model.MethodTemplateModels)
        {
        @:@(Include(new MethodTemplate(), method))
        @EmptyLine
        @:
        }
    }
}
